{"version":3,"sources":["utils/queries.js","utils/avatars.js","utils/auth.js","utils/validate.js","components/SignupForm.js","images/logo200.png","components/Navbar.js","images/logo.png","components/SingleCard.js","pages/Home.js","components/ProfileCards.js","utils/valuesForQuizForm.js","utils/trivaApi.js","components/Quiz/QuizSearchForm.js","pages/Profile.js","components/Quiz/QuizResult.js","components/Quiz/QuizLogic.js","components/Quiz/Quiz.js","App.js","reportWebVitals.js","index.js"],"names":["getSingleQuiz","gql","getAllQuizzes","getUserQuizzes","signUpMutation","loginUserMutation","addQuizMutation","removeQuizMutation","AddScoreToQuizMutation","Avatars","avatarData","image","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","setStyle","name","value","callback","test","length","SignupForm","signUpForm","useState","avatar","username","email","password","password2","userFormData","setUserFormData","FaRegEnvelopeState","setFaRegEnvelopeState","MdLockOutlineSate","setMdLockOutlineSate","MdLockOutlineSate2","setMdLockOutlineSate2","FaUserAltSate","setFaUserAltSate","validated","Error","Success","showAlert","setShowAlert","alertMessage","setAlertMessage","useMutation","createUser","signUpData","data","loginUser","loginData","useEffect","Auth","login","signUp","handleInputChange","event","target","handleFormSubmit","a","preventDefault","variables","message","console","log","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","className","type","placeholder","onChange","required","disabled","refreshPage","replace","AppNavbar","showModal","setShowModal","Navbar","expand","Container","fluid","Brand","src","logo","alt","Toggle","Collapse","id","Nav","to","onClick","loggedIn","logout","Modal","size","onHide","href","Tab","defaultActiveKey","Header","closeButton","Title","Item","Link","eventKey","Body","Content","Pane","handleModalClose","icon","faUser","getProfile","date","author","SingleCard","quizData","noOfQuestions","userName","toDelet","setUserQuizes","delQuiz","handleClick","_id","quizList","removeQuiz","created_at","title","difficulty","category","Home","useQuery","loading","Quizes","setAllQuizes","role","map","quiz","questions","ProfileCards","userQuizes","categoryOptions","label","typeOptions","difficultyOptions","searchQuiz","query","fetch","amount","json","resp","amountOptions","QuizSearchForm","Fail","AlertType","setAlertType","addQuiz","split","newValue","stopPropagation","results","Quiz","toString","question","correct_answer","incorrect_answers","number","Profile","QuizResult","correctAnswers","quizLength","Result","quiz_id","user_id","user_name","QuizLogic","quizId","userId","addScore","quizQuestions","Q","questionNumber","setquestionNumber","activeQuestion","setActiveQuestion","setCorrectAnswers","timeLeft","setTimeLeft","isComplete","setComplete","score","setScore","answerArray","arr1","arr2","answerArray1","arr","Array","fill","_","i","Math","random","sort","timer","setTimeout","clearTimeout","handleSubmit","answerIndex","parseInt","totalQuestions","totalScore","round","scoreString","quizScore","mydata","ProgressBar","striped","animated","max","parse","ListGroup","as","answer","index","action","active","useParams","getQuiz","App","exact","path","element","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.37b19bd1.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\n// Graphql queries\nexport const getUser = gql`\n  query getMe {\n    me {\n      _id\n      username\n      email\n      \n    }\n  }\n`;\n\nexport const getSingleQuiz = gql`\n  query getQuiz($_id: ID!) {\n    getQuiz(_id: $_id) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const getAllQuizzes = gql`\n  query {\n    getAllQuizzes {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\n\nexport const getUserQuizzes = gql`\n  query {\n    getUserQuizzes {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\n\n// Graphql Mutations\n\nexport const signUpMutation = gql`\n  mutation signUp(\n    $avatar: String!\n    $username: String!\n    $email: String!\n    $password: String!\n    $password2: String!\n  ) {\n    signUp(\n      avatar: $avatar\n      username: $username\n      email: $email\n      password: $password\n      password2: $password2\n    ) {\n      token\n      user {\n        _id\n        avatar\n        email\n        username\n      }\n    }\n  }\n`;\n\nexport const loginUserMutation = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        avatar\n        username\n        email\n      }\n    }\n  }\n`;\n\nexport const addQuizMutation = gql`\n  mutation addQuiz(\n    $title: String!\n    $category: String!\n    $amount: String!\n    $type: String!\n    $difficulty: String!\n    $questions: [Question!]\n  ) {\n    addQuiz(\n      title: $title\n      category: $category\n      amount: $amount\n      type: $type\n      difficulty: $difficulty\n      questions: $questions\n    ) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const removeQuizMutation = gql`\n  mutation removeQuiz($id: ID!) {\n    removeQuiz(_id: $id) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const AddScoreToQuizMutation = gql`\n  mutation AddScoreToQuiz($id: ID!, $score: Score!) {\n    AddScoreToQuiz(_id: $id, score: $score) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;","var Avatars = {\n  avatarData: [\n    {\n      image: \"../images/avatars/Avatar1.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar2.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar3.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar4.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar5.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar6.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar7.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar8.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar9.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar10.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar11.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar12.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar13.png\",\n    },\n  ],\n};\nexport default Avatars;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","const validateEmail = (email) => {\n  const re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport const setStyle = (name, value, callback) => {\n  if (!value) return callback(\"text-gray-400 m-2\");\n  switch (name) {\n    case \"email\":\n      if (value) {\n        const validEmail = validateEmail(value);\n        if (!validEmail) {\n          return callback(\"text-red-600 m-2\");\n        } else {\n          return callback(\"text-green-600 m-2\");\n        }\n      }\n      break;\n    case \"password\":\n      if (value) {\n        if (value.length >= 6) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    case \"password2\":\n      if (value) {\n        if (value.length >= 6) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    case \"username\":\n      if (value) {\n        if (value.length > 2) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    default:\n      return;\n  }\n\n  if (name === \"username\" && value.length > 2) {\n    return callback(\"text-green-600 m-2\");\n  } else {\n    return callback(\"text-red-600 m-2\");\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Alert } from \"react-bootstrap\";\n// react icons\nimport { FaRegEnvelope } from \"react-icons/fa\";\nimport { MdLockOutline } from \"react-icons/md\";\nimport { FaUserAlt } from \"react-icons/fa\";\n\nimport { useMutation } from \"@apollo/client\";\n\nimport { signUpMutation } from \"../utils/queries\";\nimport { loginUserMutation } from \"../utils/queries\";\nimport Avatars from \"../utils/avatars\";\n\nimport Auth from \"../utils/auth\";\n\nimport { setStyle } from \"../utils/validate\";\n\nconst SignupForm = ({ signUpForm }) => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    avatar: Avatars.avatarData[0].image,\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const [FaRegEnvelopeState, setFaRegEnvelopeState] =\n    useState(\"text-gray-400 m-2\");\n  const [MdLockOutlineSate, setMdLockOutlineSate] =\n    useState(\"text-gray-400 m-2\");\n  const [MdLockOutlineSate2, setMdLockOutlineSate2] =\n    useState(\"text-gray-400 m-2\");\n\n  const [FaUserAltSate, setFaUserAltSate] = useState(\"text-gray-400 m-2\");\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState({ Error: false, Success: false });\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  //Mutation request to crteate a user\n  let [createUser, { data: signUpData }] = useMutation(signUpMutation);\n  let [loginUser, { data: loginData }] = useMutation(loginUserMutation);\n\n  useEffect(() => {\n    if (signUpForm) {\n      if (!signUpData) return;\n      Auth.login(signUpData.signUp.token);\n    } else {\n      if (!loginData) return;\n      Auth.login(loginData.login.token);\n    }\n  }, [loginData, signUpForm, signUpData]);\n\n  const handleInputChange = (event) => {\n    setAlertMessage(\"\");\n    setShowAlert(false);\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n\n    if (name === \"email\") setStyle(name, value, setFaRegEnvelopeState);\n    if (name === \"username\") setStyle(name, value, setFaUserAltSate);\n    if (name === \"password\") setStyle(name, value, setMdLockOutlineSate);\n    if (name === \"password2\") setStyle(name, value, setMdLockOutlineSate2);\n  };\n\n  const handleFormSubmit = async (event) => {\n    setShowAlert(false);\n\n    event.preventDefault();\n    try {\n      if (signUpForm) {\n        if (userFormData.password !== userFormData.password2) {\n          setShowAlert(true);\n          setAlertMessage(\"passwords should match!\");\n        }\n        await createUser({ variables: { ...userFormData } });\n\n        setAlertMessage(\"You Signed up successfully.\");\n      } else {\n        await loginUser({\n          variables: {\n            email: userFormData.email,\n            password: userFormData.password,\n          },\n        });\n\n        setAlertMessage(\"You Loggedin successfully.\");\n      }\n      setShowAlert({ Error: false, Success: true });\n\n      setUserFormData({\n        avatar: Avatars.avatarData[0].image,\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n      });\n    } catch (err) {\n      setShowAlert({ Error: true, Success: false });\n\n      setAlertMessage(err.message);\n      console.log(err.message);\n    }\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n\n        {showAlert.Error ? (\n          <Alert\n            dismissible\n            onClose={() => setShowAlert(false)}\n            show={showAlert}\n            variant=\"danger\"\n          >\n            {alertMessage}\n          </Alert>\n        ) : (\n          \"\"\n        )}\n        {showAlert.Success ? (\n          <Alert\n            dismissible\n            onClose={() => setShowAlert(false)}\n            show={showAlert}\n            variant=\"success\"\n          >\n            {alertMessage}\n          </Alert>\n        ) : (\n          \"\"\n        )}\n\n        {signUpForm ? (\n          <Form.Group>\n            <Form.Label htmlFor=\"username\">Username</Form.Label>\n            <div className=\"bg-gray-200 rounded-xl  w-100 p-2 flex items-center mb-3 \">\n              <FaUserAlt className={FaUserAltSate} />\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"User Name\"\n                className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n                value={userFormData.username}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n          </Form.Group>\n        ) : (\n          \"\"\n        )}\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <div className=\"bg-gray-200 rounded-xl w-100 p-2 flex items-center mb-3 \">\n            <FaRegEnvelope className={FaRegEnvelopeState} />\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n              value={userFormData.email}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <div className=\"bg-gray-200  rounded-xl w-100 p-2 flex items-center \">\n            <MdLockOutline className={MdLockOutlineSate} />\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleInputChange}\n              value={userFormData.password}\n              required\n              className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n            />\n          </div>\n        </Form.Group>\n        {signUpForm ? (\n          <Form.Group>\n            <Form.Label htmlFor=\"password2\">Repeat Password</Form.Label>\n            <div className=\"bg-gray-200 rounded-xl  w-100 p-2 flex items-center \">\n              <MdLockOutline className={MdLockOutlineSate2} />\n              <input\n                type=\"password\"\n                name=\"password2\"\n                placeholder=\"Repeat Password\"\n                onChange={handleInputChange}\n                value={userFormData.password2}\n                required\n                className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n              />\n            </div>\n          </Form.Group>\n        ) : (\n          \"\"\n        )}\n        <button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n          className=\"border-2 w-100  rounded-full text-center border-green-500 px-12 py-2 inline-block mt-4 font-semibold text hover:bg-green-500 hover:text-white text-decoration-none\"\n        >\n          Submit\n        </button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","export default __webpack_public_path__ + \"static/media/logo200.b4b00df4.png\";","import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\n\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport SignUpForm from \"./SignupForm\";\nimport \"./style.css\";\nimport logo from \"../images/logo200.png\";\nimport Auth from \"../utils/auth\";\nfunction refreshPage() {\n  window.location.replace(\"/\");\n}\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <>\n      <Navbar\n        expand=\"lg\"\n        className=\"bg-gradient-to-r from-purple-100 to-purple-900\"\n      >\n        <Container\n          fluid\n          className=\"bg-gradient-to-r from-purple-100 to-purple-900\"\n        >\n          <Navbar.Brand>\n            {\" \"}\n            <img src={logo} className=\"w-25\" alt=\"logo\" />\n          </Navbar.Brand>\n\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <NavLink\n                className=\"ml-2 px-2 cursor-pointer text-xl  bg-green-800 py-1  rounded-lg text-green-100 no-underline hover:bg-green-100 hover:text-green-600\"\n                to=\"/\"\n                onClick={refreshPage}\n              >\n                <i className=\"fas fa-home text-blue-300\"></i> Home\n              </NavLink>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  {Auth.loggedIn() ? (\n                    <NavLink\n                      to=\"/profile\"\n                      className=\"ml-2 px-2 cursor-pointer text-xl  bg-green-800 py-1  rounded-lg text-green-100 no-underline hover:bg-green-100 hover:text-green-600\"\n                    >\n                      Profile\n                    </NavLink>\n                  ) : (\n                    \"\"\n                  )}\n\n                  <button\n                    className=\"ml-2 px-2 cursor-pointer text-xl  bg-green-800 py-1  rounded-lg text-green-100 no-underline hover:bg-green-100 hover:text-green-600\"\n                    onClick={Auth.logout}\n                  >\n                    <i className=\"fas fa-sign-out-alt text-red-200\"></i> Logout\n                  </button>\n                </>\n              ) : (\n                <button\n                  className=\"ml-2 px-2 cursor-pointer text-xl  bg-green-800 py-1  rounded-lg text-green-100 no-underline hover:bg-green-100 hover:text-green-600\"\n                  onClick={() => setShowModal(true)}\n                >\n                  Login/Sign Up\n                </button>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n\n      <Modal\n        size=\"md\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        <img src={logo} href=\"/\" className=\"w-25 my-2 mx-auto\" alt=\"logo\" />\n\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"tabs\">\n                <Nav.Item>\n                  <Nav.Link className=\"btn \" eventKey=\"login\">\n                    Login\n                  </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link className=\"btn\" eventKey=\"signup\">\n                    Sign Up\n                  </Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body className=\"bg-gray-100 m-3 shadow-md rounded-xl\">\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <SignUpForm\n                  signUpForm={false}\n                  handleModalClose={() => setShowModal(false)}\n                />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm\n                  signUpForm={true}\n                  handleModalClose={() => setShowModal(false)}\n                />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n      {Auth.loggedIn() ? (\n        <h4 className=\"px-3 bg-gradient-to-r from-purple-900 to-purple-100 text-center p-2 \">\n          <FontAwesomeIcon icon={faUser} className=\"text-danger ml-4\" />{\" \"}\n          <span className=\"text-white p-2\">\n            {Auth.getProfile().data.username}\n          </span>{\" \"}\n        </h4>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default AppNavbar;\n","export default __webpack_public_path__ + \"static/media/logo.23dac1f9.png\";","import React from \"react\";\nimport logo from \"../images/logo.png\";\nimport { Link } from \"react-router-dom\";\n\nimport { removeQuizMutation } from \"../utils/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\n\nvar date = new Date();\nvar author = \"\";\nconst SingleCard = ({\n  quizData,\n  noOfQuestions,\n  userName,\n  toDelet,\n  setUserQuizes,\n}) => {\n  author = userName;\n\n  const [delQuiz] = useMutation(removeQuizMutation);\n  const handleClick = async (_id) => {\n    const data = await delQuiz({ variables: { id: _id } });\n\n    const quizList = data.data.removeQuiz;\n    return setUserQuizes([...quizList]);\n    // if (!loading) setQuizData([...allData.data?.getAllQuizzes]);\n  };\n  if (quizData.created_at) {\n    date = quizData.created_at;\n  }\n  if (quizData.username) {\n    author = quizData.username;\n  }\n\n  return (\n    <>\n      <div className=\"max-w-sm rounded-xl  overflow-hidden bg-gray-800 text-red-200 opacity-90 m-3 shadow-md \">\n        <div className=\"flex justify-between \">\n          <img\n            className=\"w-25 bg-gray-900  rounded-xl m-2 p-2\"\n            src={logo}\n            alt=\"inquizer logo\"\n          />\n          <div className=\"p-2 m-2\">\n            <i className=\"fas fa-user-edit \"> </i>{\" \"}\n            <span className=\"text-blue-400\">{author}</span>\n            <div className=\"mt-2\">\n              <i className=\"far fa-calendar-check \"> </i>{\" \"}\n              <span className=\"text-green-400\">{date}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-4\">\n          <div className=\"font-bold text-yellow-200 text-xl mb-2\">\n            <i className=\"fas fa-angle-double-right text-green-500\"> </i> Title:{\" \"}\n            {quizData.title}\n          </div>\n          <div className=\" text-yellow-200 text-xl mb-2\">\n            <i className=\"fas fa-chart-pie text-green-500\"> </i> Difficulty:{\" \"}\n            {quizData.difficulty}\n          </div>\n          <div className=\" text-yellow-200 text-xl mb-2\">\n            <i className=\"fas fa-list-ul text-green-500\"> </i> No. of Questions:{\" \"}\n            {noOfQuestions}\n          </div>\n          <div className=\" text-yellow-200 text-xl mb-2\">\n            <i className=\"fas fa-layer-group text-green-500\"> </i> Category:{\" \"}\n            {quizData.category}\n          </div>\n          <div className=\"text-yellow-200 text-xl mb-2\">\n            <i className=\"fas fa-check text-green-500\"> </i> Quiz Type:{\" \"}\n            {quizData.type}\n          </div>\n          <div className=\"flex flex-1 bg-gray-700 rounded-xl  mt-5\">\n            {Auth.loggedIn() ? (\n              <Link\n                to={`quiz/${quizData._id}`}\n                className=\"cursor-pointer no-underline text-center hover:bg-green-900 hover:text-green-100 focus:outline-none focus:ring-2  rounded-xl bg-green-500 w-100 text-gray-800 m-3 p-2\"\n              >\n                <i className=\"fas fa-play-circle \"></i> Start the Quiz\n              </Link>\n            ) : (\n              <button\n                className=\" disabled:opacity-50  rounded-xl bg-red-500 w-100 text-red-100 m-3 p-2 cursor-help\"\n                disabled\n              >\n                <i className=\"fas fa-play-circle \"></i> Login and Start the Quiz\n              </button>\n            )}\n            {toDelet ? (\n              <button\n                onClick={() => {\n                  handleClick(quizData._id);\n                }}\n                className=\" focus:outline-none hover:bg-red-600 rounded-r-xl bg-green-100 text-gray-800 \"\n              >\n                <i className=\"fas fa-trash-alt text-red-500 p-3  hover:text-green-100\"></i>\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SingleCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport SingleCard from \"../components/SingleCard\";\nimport { useQuery } from \"@apollo/client\";\nimport { getAllQuizzes } from \"../utils/queries\";\nconst Home = () => {\n  const { loading, data } = useQuery(getAllQuizzes);\n\n  const [Quizes, setAllQuizes] = useState([]);\n  useEffect(() => {\n    if (loading) return;\n    setAllQuizes(data.getAllQuizzes);\n  }, [loading, data]);\n\n  return (\n    <>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4 text-center mt-3\">Welcome to</h1>\n        <h2 className=\"display-4 text-center mb-3\">\n          in<span className=\"text-red-700 font-bold\">Q</span>uizitive\n        </h2>\n      </div>\n      <div className=\"flex flex-wrap justify-center bg-gray-100 m-3 p-3 rounded-xl shadow-md\">\n        {loading ? (\n          <div\n            key=\"loading\"\n            className=\"spinner-border text-success\"\n            role=\"status\"\n          >\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        ) : (\n          Quizes.map((quiz) => {\n            return (\n              <SingleCard\n                key={quiz._id}\n                quizData={quiz}\n                noOfQuestions={quiz?.questions.length + 1}\n                toDelet={false}\n                userName={quiz.author}\n              />\n            );\n          })\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport \"./style.css\";\nimport SingleCard from \"./SingleCard\";\n\nconst ProfileCards = ({ userQuizes, userName, setUserQuizes }) => {\n  return (\n    <>\n      <div className=\"flex flex-wrap justify-center bg-gray-100 m-3 p-3 rounded-xl shadow-md\">\n        {userQuizes.map((quiz) => {\n          return (\n            <SingleCard\n              key={quiz._id}\n              quizData={quiz}\n              noOfQuestions={quiz.questions.length + 1}\n              userName={userName}\n              toDelet={true}\n              setUserQuizes={setUserQuizes}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default ProfileCards;\n","export const categoryOptions = [\n  {\n    value: 9,\n    label: \"General Knowledge\",\n  },\n  {\n    value: 10,\n    label: \"Entertainment: Books\",\n  },\n  {\n    value: 11,\n    label: \"Entertainment: Film\",\n  },\n  {\n    value: 12,\n    label: \"Entertainment: Music\",\n  },\n  {\n    value: 13,\n    label: \"Entertainment: Musicals & Theatres\",\n  },\n  {\n    value: 14,\n    label: \"Entertainment: Television\",\n  },\n  {\n    value: 15,\n    label: \"Entertainment: Video Games\",\n  },\n  {\n    value: 16,\n    label: \"Entertainment: Board Games\",\n  },\n  {\n    value: 17,\n    label: \"Science & Nature\",\n  },\n  {\n    value: 18,\n    label: \"Science: Computers\",\n  },\n  {\n    value: 19,\n    label: \"Science: Mathematics\",\n  },\n  {\n    value: 20,\n    label: \"Mythology\",\n  },\n  {\n    value: 21,\n    label: \"Sports\",\n  },\n  {\n    value: 22,\n    label: \"Geography\",\n  },\n  {\n    value: 23,\n    label: \"History\",\n  },\n  {\n    value: 24,\n    label: \"Politics\",\n  },\n  {\n    value: 25,\n    label: \"Art\",\n  },\n  {\n    value: 26,\n    label: \"Celebrities\",\n  },\n  {\n    value: 27,\n    label: \"Animals\",\n  },\n  {\n    value: 28,\n    label: \"Vehicles\",\n  },\n  {\n    value: 29,\n    label: \"Entertainment: Comics\",\n  },\n  {\n    value: 30,\n    label: \"Science: Gadgets\",\n  },\n  {\n    value: 31,\n    label: \"Entertainment: Japanese Anime & Manga\",\n  },\n  {\n    value: 32,\n    label: \"Entertainment: Cartoon & Animations\",\n  },\n];\n\nexport const typeOptions = [\n  {\n    value: \"multiple\",\n    label: \"Multiple Choice\",\n  },\n  {\n    value: \"boolean\",\n    label: \"True / False\",\n  },\n];\n\nexport const difficultyOptions = [\n  {\n    value: \"easy\",\n    label: \"Easy\",\n  },\n  {\n    value: \"medium\",\n    label: \"Medium\",\n  },\n  {\n    value: \"hard\",\n    label: \"Hard\",\n  },\n];\n","export const searchQuiz = async (query) => {\n  const quizData = await fetch(\n    `https://opentdb.com/api.php?amount=${query.amount}&category=${query.category.value}&difficulty=${query.difficulty}&type=${query.type}`\n  );\n  console.log(\n    `https://opentdb.com/api.php?amount=${query.amount}&category=${query.category.value}&difficulty=${query.difficulty}&type=${query.type}`\n  );\n  const resp = await quizData.json();\n  return resp;\n};\n","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\n\nimport ProfileCards from \"../ProfileCards\";\nimport { addQuizMutation } from \"../../utils/queries\";\n\nimport {\n  categoryOptions,\n  difficultyOptions,\n  typeOptions,\n} from \"../../utils/valuesForQuizForm\";\nimport { searchQuiz } from \"../../utils/trivaApi\";\nimport Auth from \"../../utils/auth\";\n\nconst amountOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfunction QuizSearchForm({ quizData }) {\n  const userName = Auth.getProfile().data.username;\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [AlertType, setAlertType] = useState({ Fail: false, Success: false });\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  const [addQuiz] = useMutation(addQuizMutation);\n\n  const [userQuizes, setUserQuizes] = useState([...quizData]);\n\n  const [userFormData, setUserFormData] = useState({\n    title: \"\",\n    amount: amountOptions[0],\n    category: {\n      label: categoryOptions[0].label,\n      value: categoryOptions[0].value,\n    },\n    type: typeOptions[0].value,\n    difficulty: difficultyOptions[0].value,\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    if (name === \"category\") {\n      setUserFormData({\n        ...userFormData,\n        [name]: {\n          value: event.target.value.split(\",\")[0],\n          label: event.target.value.split(\",\")[1],\n        },\n      });\n    } else if (name === \"type\") {\n      let newValue;\n      if (value === \"boolean\") newValue = \"True/False type\";\n      if (value === \"multiple\") newValue = \"Mutiple choice type\";\n      setUserFormData({\n        ...userFormData,\n        [name]: newValue,\n      });\n    } else {\n      setUserFormData({ ...userFormData, [name]: value });\n    }\n  };\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    // check if form has everything (as per react-bootstrap docs)\n    event.stopPropagation();\n    try {\n      const { results } = await searchQuiz(userFormData);\n\n      let Quiz = {};\n      Quiz.title = userFormData.title;\n      Quiz.amount = userFormData.amount.toString();\n      Quiz.category = userFormData.category.label;\n      Quiz.type = userFormData.type;\n      Quiz.difficulty = userFormData.difficulty;\n\n      Quiz.questions = [];\n      Quiz.questions = results.map(\n        ({ question, correct_answer, incorrect_answers }) => {\n          return { question, correct_answer, incorrect_answers };\n        }\n      );\n\n      const { data } = await addQuiz({ variables: Quiz });\n\n      // const quiz_id = data.addQuiz._id;\n      setUserQuizes([...data?.addQuiz]);\n      setShowAlert(true);\n      setAlertType({ Fail: false, Success: true });\n      setAlertMessage(\"Your Quizz added successfully.\");\n      setUserFormData({\n        title: \"\",\n        amount: amountOptions[0],\n        category: {\n          label: categoryOptions[0].label,\n          value: categoryOptions[0].value,\n        },\n        type: typeOptions[0].value,\n        difficulty: difficultyOptions[0].value,\n      });\n    } catch (err) {\n      setAlertMessage(err.message);\n      setShowAlert(true);\n      setAlertType({ Fail: true, Success: false });\n    }\n  };\n  return (\n    <div className=\" grid grid-cols-1 lg:grid-cols-3 gap-2\">\n      <div className=\"w-100 bg-purple-100 rounded-xl \">\n        <form onSubmit={handleFormSubmit}>\n          {AlertType.Fail ? (\n            <Alert\n              dismissible\n              onClose={() => setShowAlert(false)}\n              show={showAlert}\n              variant=\"danger\"\n            >\n              {alertMessage}\n            </Alert>\n          ) : (\n            \"\"\n          )}\n          {AlertType.Success ? (\n            <Alert\n              dismissible\n              onClose={() => setShowAlert(false)}\n              show={showAlert}\n              variant=\"success\"\n            >\n              {alertMessage}\n            </Alert>\n          ) : (\n            \"\"\n          )}\n\n          <h1 className=\"text-green-800 m-5 text-center\">Add a New Quiz</h1>\n          <div className=\"container w-full\">\n            <label className=\"block text-left m-2\" htmlFor=\"amount\">\n              <span className=\"text-gray-700\">Quiz Title: </span>\n              <input\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Place the Quiz title here\"\n                className=\"bg-gray-100 my-2 text-green-600 font-bold shadow-md rounded  py-2 px-2  flex-1 \"\n                value={userFormData.title}\n                onChange={handleInputChange}\n                required\n              />\n            </label>\n            <label className=\"block text-left m-2\" htmlFor=\"amount\">\n              <span className=\"text-gray-700\">Amount of questions: </span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.amount}\n                name=\"amount\"\n                onChange={handleInputChange}\n              >\n                {amountOptions.map((number) => (\n                  <option key={number} value={number}>\n                    {number}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"category\">\n              <span className=\"text-gray-700\">Select category:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={\n                  userFormData.category.value +\n                  \",\" +\n                  userFormData.category.label\n                }\n                name=\"category\"\n                onChange={handleInputChange}\n              >\n                {categoryOptions.map(({ value, label }) => (\n                  <option key={label} value={value + \",\" + label}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"difficulty\">\n              <span className=\"text-gray-700\">Difficulty:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.difficulty.label}\n                name=\"difficulty\"\n                onChange={handleInputChange}\n              >\n                {difficultyOptions.map(({ value, label }) => (\n                  <option key={label} value={value}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"type\">\n              <span className=\"text-gray-700\">Type of question:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.type.label}\n                name=\"type\"\n                onChange={handleInputChange}\n              >\n                {typeOptions.map(({ value, label }) => (\n                  <option key={label} value={value}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <button\n              disabled={!userFormData.title}\n              type=\"submit\"\n              variant=\"success\"\n              className=\"border-2 w-100 shadow-md rounded-full  border-green-500 px-12 py-2 inline-block mt-2 font-semibold text hover:bg-green-500 hover:text-white text-decoration-none\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className=\"col-span-2  shadow-md bg-gray-600 rounded-xl\">\n        {!userQuizes ? (\n          <div\n            key=\"loading\"\n            className=\"spinner-border text-success\"\n            role=\"status\"\n          >\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        ) : (\n          <ProfileCards\n            setUserQuizes={setUserQuizes}\n            userQuizes={userQuizes}\n            userName={userName}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default QuizSearchForm;\n","import React from \"react\";\nimport QuizSearchForm from \"../components/Quiz/QuizSearchForm\";\nimport { useQuery } from \"@apollo/client\";\nimport { getUserQuizzes } from \"../utils/queries\";\n\nconst Profile = () => {\n  const { loading, data } = useQuery(getUserQuizzes);\n  return (\n    <>\n      {loading ? (\n        <div\n          key=\"loading\"\n          className=\"spinner-border text-success\"\n          role=\"status\"\n        >\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : (\n        <div>\n          <QuizSearchForm quizData={data.getUserQuizzes} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { AddScoreToQuizMutation } from \"../../utils/queries\";\nconst QuizResult = ({\n  correctAnswers,\n  quizLength,\n  Result,\n  quiz_id,\n  user_id,\n  user_name,\n}) => {\n\n   return (\n     <div className=\"container bg-purple-100 rounded-xl shadow-md p-3\">\n       <h1 className=\"text-center m-3  \"> Quiz Result</h1>\n       <hr />\n       <h2 className=\" p-1  \">\n         <i className=\"fas fa-check-square text-green-500\"></i>{\" \"}\n         <span className=\"text-purple-900 \">{correctAnswers} </span>\n         OUT OF <span className=\"text-purple-900 text-3xl\">{quizLength} </span>\n       </h2>\n       <h2> your Score: {Result} </h2>\n       <hr />\n     </div>\n   );\n};\n\nexport default QuizResult;\n","import React, { useEffect, useState } from \"react\";\nimport { ListGroup, ProgressBar } from \"react-bootstrap\";\nimport logo from \"../../images/logo.png\";\nimport QuizResult from \"./QuizResult\";\nimport { useMutation } from \"@apollo/client\";\nimport { AddScoreToQuizMutation } from \"../../utils/queries\";\nimport \"./style.css\";\n\nimport parse from \"html-react-parser\";\nimport Auth from \"../../utils/auth\";\n\nconst TIME_PER_QUESTION = 10;\n\nconst QuizLogic = ({ quizData, quizId }) => {\n  const userId = Auth.getProfile().data._id;\n  const user_name = Auth.getProfile().data.username;\n\n  let [addScore, { data: ScoreData }] = useMutation(AddScoreToQuizMutation);\n\n  // console.log(quizData, quizId);\n\n  const category = quizData.category;\n  const type = quizData.type;\n  const difficulty = quizData.difficulty;\n  // const author = quizData.author;\n\n  const Questions = quizData.questions || [];\n  const quizQuestions = Questions.map((Q) => {\n    const correct_answer = Q.correct_answer;\n    const incorrect_answers = Q.incorrect_answers;\n    const question = Q.question;\n    return {\n      category,\n      type,\n      difficulty,\n      correct_answer,\n      incorrect_answers,\n      question,\n    };\n  });\n\n  const [questionNumber, setquestionNumber] = useState(0);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const [timeLeft, setTimeLeft] = useState(\n    TIME_PER_QUESTION * quizQuestions.length\n  );\n\n  const [answers, setAnswers] = useState([]);\n  const [isComplete, setComplete] = useState(false);\n  const [score, setScore] = useState(0);\n\n  function shuffle1(arr) {\n    return Array(arr.length)\n      .fill(null)\n      .map((_, i) => [Math.random(), i])\n      .sort(([a], [b]) => a - b)\n      .map(([, i]) => arr[i]);\n  }\n\n  let answerArray = [];\n  var arr1 = [...quizQuestions[questionNumber].incorrect_answers];\n  var arr2 = quizQuestions[questionNumber].correct_answer;\n  let answerArray1 = [...arr1, arr2];\n\n  answerArray = answerArray1;\n\n  useEffect(() => {\n    answerArray = shuffle1(answerArray1);\n  }, [questionNumber, answerArray]);\n  const timer = setTimeout(() => {\n    if (timeLeft <= 0) {\n      clearTimeout(timer);\n      setComplete(true);\n    } else {\n      setTimeLeft(timeLeft - 1);\n    }\n  }, [1000]);\n\n  const handleClick = (event) => {\n    setActiveQuestion(event.target.id);\n    // console.log(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    setActiveQuestion(0);\n    if (activeQuestion !== 0) {\n      const answerIndex = parseInt(activeQuestion.replace(/[^0-9]/g, \"\"));\n      if (\n        answerArray[answerIndex] ===\n        quizQuestions[questionNumber].correct_answer\n      ) {\n        setCorrectAnswers(correctAnswers + 1);\n      }\n\n      if (questionNumber < quizQuestions.length - 1) {\n        setquestionNumber(questionNumber + 1);\n      } else {\n        const totalQuestions = quizQuestions.length;\n        const totalScore =\n          (correctAnswers / totalQuestions) *\n          (timer / totalQuestions) *\n          TIME_PER_QUESTION;\n        setScore(Math.round(totalScore));\n        const scoreString = score.toString();\n        console.log(scoreString);\n        const quizScore = { score: scoreString, user_id: userId };\n        const mydata = await addScore({\n          variables: { id: quizId, score: quizScore },\n        });\n        console.log(mydata);\n\n        setComplete(true);\n      }\n    }\n  };\n\n  if (isComplete) {\n    return (\n      <QuizResult\n        correctAnswers={correctAnswers}\n        quizLength={quizQuestions.length}\n        Result={score}\n        quiz_id={quizId}\n        user_id={userId}\n        user_name={user_name}\n      />\n    );\n  } else {\n    return (\n      <div className=\"container shadow-xl my-4 mx-auto border-2 p-4 bg-gray-100  rounded-xl\">\n        <img\n          className=\"w-20 mx-auto rounded-xl m-2\"\n          src={logo}\n          alt=\"inquizer logo\"\n        />{\" \"}\n        <h1>\n          <span>\n            <i className=\"fas fa-check-double text-green-700\"></i>\n          </span>{\" \"}\n          Correct answers:{\" \"}\n          <span className=\"text-green-600 font-mono font-bold\">\n            {correctAnswers}\n          </span>\n        </h1>\n        <hr />\n        <h3>\n          {\" \"}\n          <span>\n            <i className=\"fas fa-hourglass-half text-red-700\"></i>\n          </span>{\" \"}\n          Time left\n          <div>\n            <ProgressBar\n              id=\"bar\"\n              striped\n              animated\n              max={TIME_PER_QUESTION * quizQuestions.length}\n              now={timeLeft}\n              label={`${timeLeft} sec`}\n              variant=\"danger\"\n            />\n          </div>\n        </h3>\n        <hr />\n        <h2>\n          {\" \"}\n          <i className=\"fas fa-question-circle text-blue-900\"></i> Question\n        </h2>\n        <p className=\"text-blue-600 font-bold text-2xl m-2 p-2 h-20\">\n          {\" \"}\n          {parse(quizQuestions[questionNumber].question)}\n        </p>\n        <br />\n        <ListGroup as=\"ul\" className=\" text-2xl\">\n          {answerArray.map((answer, index) =>\n            `answer-${index}` === activeQuestion ? (\n              <ListGroup.Item\n                className=\"list-group-item-primary rounded-b-2xl\"\n                key={index}\n                action\n                onClick={handleClick}\n                active\n                id={`answer-${index}`}\n              >\n                <i className=\"fas fa-angle-double-right text-yellow-400\"></i>{\" \"}\n                {parse(answer)}\n              </ListGroup.Item>\n            ) : (\n              <ListGroup.Item\n                className=\"list-group-item-light\"\n                key={index}\n                action\n                onClick={handleClick}\n                id={`answer-${index}`}\n              >\n                {parse(answer)}\n              </ListGroup.Item>\n            )\n          )}\n        </ListGroup>\n        <br />\n        <hr />\n        <div className=\"d-grid gap-2\">\n          <button\n            className=\"bg-green-900 text-green-100 rounded-full text-2xl py-2\"\n            onClick={handleSubmit}\n          >\n            <i className=\"fas fa-forward  text-yellow-200\"></i>{\" \"}\n            <span className=\"font-bold text-white\"> Submit</span>\n          </button>\n        </div>\n        <br />\n        <ProgressBar now={(questionNumber * 100) / quizQuestions.length} />\n      </div>\n    );\n  }\n};;\n\nexport default QuizLogic;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router-dom\";\nimport { getSingleQuiz } from \"../../utils/queries\";\nimport QuizLogic from \"./QuizLogic\";\n\nconst Quiz = () => {\n  const { quizId } = useParams();\n  // console.log(quizId);\n  const { loading, data } = useQuery(getSingleQuiz, {\n    variables: { _id: quizId },\n  });\n\n  return (\n    <div>\n      {loading ? (\n        <div className=\"spinner-border text-success\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : (\n        <QuizLogic quizData={data.getQuiz} quizId={quizId} />\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Profile from \"./pages/Profile\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Auth from \"./utils/auth\";\n\n\nfunction App() {\n  \n  return (\n    <Router>\n      <Navbar />\n      {/* <Quiz /> */}\n      <Routes>\n        <Route exact path=\"/\" element={<Home />} />\n        <Route\n          exact\n          path=\"/profile\"\n          element={Auth.loggedIn() ? <Profile /> : <Home />}\n        />\n        <Route exact path=\"/quiz/:quizId\" element={<Quiz />} />\n        <Route exact path=\"/profile/quiz/:quizId\" element={<Quiz />} />\n\n        {/* <Route exact path=\"/quiz\" component={CreateQuiz} /> */}\n        <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n      </Routes>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Auth from \"./utils/auth\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  ApolloLink,\n  concat,\n} from \"@apollo/client\";\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" });\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext(({ headers = {} }) => ({\n    headers: {\n      ...headers,\n      authorization: Auth.loggedIn() ? Auth.getToken() : null,\n    },\n  }));\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink),\n});\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}