{"version":3,"sources":["utils/avatars.js","utils/auth.js","utils/queries.js","utils/validate.js","components/SignupForm.js","images/logo200.png","components/Navbar.js","images/logo.png","components/SingleCard.js","pages/Home.js","components/ProfileCards.js","utils/valuesForQuizForm.js","utils/trivaApi.js","components/Quiz/QuizSearchForm.js","pages/Profile.js","components/Quiz/SummaryCard.js","components/Quiz/QuizResult.js","components/Quiz/QuizLogic.js","components/Quiz/Quiz.js","App.js","reportWebVitals.js","index.js"],"names":["Avatars","avatarData","image","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","getSingleQuiz","gql","getAllQuizzes","getUserQuizzes","signUpMutation","loginUserMutation","addQuizMutation","removeQuizMutation","AddScoreToQuizMutation","setStyle","name","value","callback","test","length","SignupForm","signUpForm","useState","avatar","username","email","password","password2","userFormData","setUserFormData","FaRegEnvelopeState","setFaRegEnvelopeState","MdLockOutlineSate","setMdLockOutlineSate","MdLockOutlineSate2","setMdLockOutlineSate2","FaUserAltSate","setFaUserAltSate","validated","Error","Success","showAlert","setShowAlert","alertMessage","setAlertMessage","useMutation","createUser","signUpData","data","loginUser","loginData","useEffect","Auth","login","signUp","handleInputChange","event","target","handleFormSubmit","a","preventDefault","variables","message","console","log","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","className","type","placeholder","onChange","required","disabled","refreshPage","replace","AppNavbar","showModal","setShowModal","Navbar","expand","Container","fluid","Brand","src","logo","alt","Toggle","Collapse","id","Nav","to","onClick","loggedIn","logout","Modal","size","onHide","href","Tab","defaultActiveKey","Header","closeButton","Title","Item","Link","eventKey","Body","Content","Pane","handleModalClose","icon","faUser","getProfile","toUpperCase","date","author","SingleCard","quizData","noOfQuestions","userName","toDelet","setUserQuizes","delQuiz","handleClick","_id","quizList","removeQuiz","created_at","title","difficulty","category","Home","useQuery","loading","Quizes","setAllQuizes","role","map","quiz","questions","ProfileCards","userQuizes","categoryOptions","label","typeOptions","difficultyOptions","searchQuiz","query","fetch","amount","json","resp","amountOptions","QuizSearchForm","Fail","AlertType","setAlertType","addQuiz","split","newValue","stopPropagation","results","Quiz","toString","question","correct_answer","incorrect_answers","htmlFor","number","Profile","SummaryCard","questionRes","res","QuizResult","correctAnswers","quizLength","result","summary","index","QuizLogic","quizId","userId","addScore","quizQuestions","Q","questionNumber","setquestionNumber","activeQuestion","setActiveQuestion","setCorrectAnswers","answers","setAnswers","setSummary","timeLeft","setTimeLeft","isComplete","setComplete","score","setScore","arr","Array","fill","_","i","Math","random","sort","timer","setTimeout","clearTimeout","handleSubmit","answerIndex","parseInt","totalQuestions","totalScore","round","quizScore","user_id","ProgressBar","striped","animated","max","parse","ListGroup","as","answer","action","active","useParams","getQuiz","App","exact","path","element","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b4f34c1e.chunk.js","sourcesContent":["var Avatars = {\n  avatarData: [\n    {\n      image: \"../images/avatars/Avatar1.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar2.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar3.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar4.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar5.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar6.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar7.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar8.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar9.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar10.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar11.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar12.png\",\n    },\n    {\n      image: \"../images/avatars/Avatar13.png\",\n    },\n  ],\n};\nexport default Avatars;\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from \"@apollo/client\";\n\n// Graphql queries\nexport const getUser = gql`\n  query getMe {\n    me {\n      _id\n      username\n      email\n      \n    }\n  }\n`;\n\nexport const getSingleQuiz = gql`\n  query getQuiz($_id: ID!) {\n    getQuiz(_id: $_id) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const getAllQuizzes = gql`\n  query {\n    getAllQuizzes {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\n\nexport const getUserQuizzes = gql`\n  query {\n    getUserQuizzes {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\n\n// Graphql Mutations\n\nexport const signUpMutation = gql`\n  mutation signUp(\n    $avatar: String!\n    $username: String!\n    $email: String!\n    $password: String!\n    $password2: String!\n  ) {\n    signUp(\n      avatar: $avatar\n      username: $username\n      email: $email\n      password: $password\n      password2: $password2\n    ) {\n      token\n      user {\n        _id\n        avatar\n        email\n        username\n      }\n    }\n  }\n`;\n\nexport const loginUserMutation = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        avatar\n        username\n        email\n      }\n    }\n  }\n`;\n\nexport const addQuizMutation = gql`\n  mutation addQuiz(\n    $title: String!\n    $category: String!\n    $amount: String!\n    $type: String!\n    $difficulty: String!\n    $questions: [Question!]\n  ) {\n    addQuiz(\n      title: $title\n      category: $category\n      amount: $amount\n      type: $type\n      difficulty: $difficulty\n      questions: $questions\n    ) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const removeQuizMutation = gql`\n  mutation removeQuiz($id: ID!) {\n    removeQuiz(_id: $id) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;\nexport const AddScoreToQuizMutation = gql`\n  mutation AddScoreToQuiz($id: ID!, $score: Score!) {\n    AddScoreToQuiz(_id: $id, score: $score) {\n      _id\n      title\n      author_id\n      author\n      created_at\n      category\n      type\n      difficulty\n      scores {\n        user_id\n        score\n      }\n      questions {\n        question\n        correct_answer\n        incorrect_answers\n      }\n    }\n  }\n`;","const validateEmail = (email) => {\n  const re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport const setStyle = (name, value, callback) => {\n  if (!value) return callback(\"text-gray-400 m-2\");\n  switch (name) {\n    case \"email\":\n      if (value) {\n        const validEmail = validateEmail(value);\n        if (!validEmail) {\n          return callback(\"text-red-600 m-2\");\n        } else {\n          return callback(\"text-green-600 m-2\");\n        }\n      }\n      break;\n    case \"password\":\n      if (value) {\n        if (value.length >= 6) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    case \"password2\":\n      if (value) {\n        if (value.length >= 6) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    case \"username\":\n      if (value) {\n        if (value.length > 2) {\n          return callback(\"text-green-600 m-2\");\n        } else {\n          return callback(\"text-red-600 m-2\");\n        }\n      }\n      break;\n    default:\n      return;\n  }\n\n  if (name === \"username\" && value.length > 2) {\n    return callback(\"text-green-600 m-2\");\n  } else {\n    return callback(\"text-red-600 m-2\");\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Alert } from \"react-bootstrap\";\n\n// react icons\nimport { FaRegEnvelope } from \"react-icons/fa\";\nimport { MdLockOutline } from \"react-icons/md\";\nimport { FaUserAlt } from \"react-icons/fa\";\n\nimport { useMutation } from \"@apollo/client\";\n\nimport Avatars from \"../utils/avatars\";\nimport Auth from \"../utils/auth\";\nimport { signUpMutation, loginUserMutation } from \"../utils/queries\";\nimport { setStyle } from \"../utils/validate\";\n\nconst SignupForm = ({ signUpForm }) => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    avatar: Avatars.avatarData[0].image,\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const [FaRegEnvelopeState, setFaRegEnvelopeState] =\n    useState(\"text-gray-400 m-2\");\n  const [MdLockOutlineSate, setMdLockOutlineSate] =\n    useState(\"text-gray-400 m-2\");\n  const [MdLockOutlineSate2, setMdLockOutlineSate2] =\n    useState(\"text-gray-400 m-2\");\n\n  const [FaUserAltSate, setFaUserAltSate] = useState(\"text-gray-400 m-2\");\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState({ Error: false, Success: false });\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  //Mutation request to crteate a user\n  let [createUser, { data: signUpData }] = useMutation(signUpMutation);\n  let [loginUser, { data: loginData }] = useMutation(loginUserMutation);\n\n  useEffect(() => {\n    if (signUpForm) {\n      if (!signUpData) return;\n      Auth.login(signUpData.signUp.token);\n    } else {\n      if (!loginData) return;\n      Auth.login(loginData.login.token);\n    }\n  }, [loginData, signUpForm, signUpData]);\n\n  const handleInputChange = (event) => {\n    setAlertMessage(\"\");\n    setShowAlert(false);\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n\n    if (name === \"email\") setStyle(name, value, setFaRegEnvelopeState);\n    if (name === \"username\") setStyle(name, value, setFaUserAltSate);\n    if (name === \"password\") setStyle(name, value, setMdLockOutlineSate);\n    if (name === \"password2\") setStyle(name, value, setMdLockOutlineSate2);\n  };\n\n  const handleFormSubmit = async (event) => {\n    setShowAlert(false);\n\n    event.preventDefault();\n    try {\n      if (signUpForm) {\n        if (userFormData.password !== userFormData.password2) {\n          setShowAlert(true);\n          setAlertMessage(\"passwords should match!\");\n        }\n        await createUser({ variables: { ...userFormData } });\n\n        setAlertMessage(\"You Signed up successfully.\");\n      } else {\n        await loginUser({\n          variables: {\n            email: userFormData.email,\n            password: userFormData.password,\n          },\n        });\n\n        setAlertMessage(\"You Loggedin successfully.\");\n      }\n      setShowAlert({ Error: false, Success: true });\n\n      setUserFormData({\n        avatar: Avatars.avatarData[0].image,\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n      });\n    } catch (err) {\n      setShowAlert({ Error: true, Success: false });\n\n      setAlertMessage(err.message);\n      console.log(err.message);\n    }\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n\n        {showAlert.Error ? (\n          <Alert\n            dismissible\n            onClose={() => setShowAlert(false)}\n            show={showAlert}\n            variant=\"danger\"\n          >\n            {alertMessage}\n          </Alert>\n        ) : (\n          \"\"\n        )}\n        {showAlert.Success ? (\n          <Alert\n            dismissible\n            onClose={() => setShowAlert(false)}\n            show={showAlert}\n            variant=\"success\"\n          >\n            {alertMessage}\n          </Alert>\n        ) : (\n          \"\"\n        )}\n\n        {signUpForm ? (\n          <Form.Group>\n            <div className=\"bg-gray-200 rounded-xl  w-100 p-2 flex items-center mb-2 \">\n              <FaUserAlt className={FaUserAltSate} />\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"User Name\"\n                className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n                value={userFormData.username}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n          </Form.Group>\n        ) : (\n          \"\"\n        )}\n        <Form.Group>\n          <div className=\"bg-gray-200 rounded-xl w-100 p-2 flex items-center mb-2 \">\n            <FaRegEnvelope className={FaRegEnvelopeState} />\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n              value={userFormData.email}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n        </Form.Group>\n        <Form.Group>\n          <div className=\"bg-gray-200 rounded-xl w-100 p-2 flex items-center mb-2 \">\n            <MdLockOutline className={MdLockOutlineSate} />\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleInputChange}\n              value={userFormData.password}\n              required\n              className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n            />\n          </div>\n        </Form.Group>\n        {signUpForm ? (\n          <Form.Group>\n            <div className=\"bg-gray-200 rounded-xl w-100 p-2 flex items-center mb-2 \">\n              <MdLockOutline className={MdLockOutlineSate2} />\n              <input\n                type=\"password\"\n                name=\"password2\"\n                placeholder=\"Repeat Password\"\n                onChange={handleInputChange}\n                value={userFormData.password2}\n                required\n                className=\"bg-gray-200 rounded-xl outline-none text-sm flex-1 p-2 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent\"\n              />\n            </div>\n          </Form.Group>\n        ) : (\n          \"\"\n        )}\n        <button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n          className=\"border-2 w-100  rounded-full text-center border-green-500 px-12 py-2 inline-block mt-4 font-semibold text hover:bg-green-500 hover:text-white text-decoration-none\"\n        >\n          Submit\n        </button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","export default __webpack_public_path__ + \"static/media/logo200.b4b00df4.png\";","import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport SignUpForm from \"./SignupForm\";\nimport Auth from \"../utils/auth\";\nimport logo from \"../images/logo200.png\";\nimport \"./style.css\";\n\nfunction refreshPage() {\n  window.location.replace(\"/\");\n}\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <>\n      <Navbar\n        expand=\"lg\"\n        className=\"bg-gradient-to-r from-purple-100 to-purple-900\"\n      >\n        <Container\n          fluid\n          className=\"bg-gradient-to-r from-purple-100 to-purple-900\"\n        >\n          <Navbar.Brand>\n            {\" \"}\n            <img src={logo} className=\"w-25\" alt=\"logo\" />\n          </Navbar.Brand>\n\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <div className=\"flex\">\n                <NavLink\n                  className=\"m-2 px-2 cursor-pointer text-xl  bg-yellow-500 py-1  rounded-lg text-green-100 no-underline hover:bg-yellow-400 hover:text-green-900\"\n                  to=\"/\"\n                  onClick={refreshPage}\n                >\n                  <i className=\"fas fa-home text-blue-900\"></i> Home\n                </NavLink>\n                {Auth.loggedIn() ? (\n                  <>\n                    <NavLink\n                      to=\"/profile\"\n                      className=\"my-2 px-2 cursor-pointer text-xl  bg-green-600 py-1  rounded-lg text-green-100 no-underline hover:bg-green-400 hover:text-green-900\"\n                    >\n                      <i className=\"far fa-address-card text-blue-900\"></i>{\" \"}\n                      Profile\n                    </NavLink>\n                    <div className=\"mx-2\">\n                      <button\n                        className=\"my-2 px-2 cursor-pointer text-xl  bg-green-600 py-1  rounded-lg text-green-100 no-underline hover:bg-green-400 hover:text-green-900\"\n                        onClick={Auth.logout}\n                      >\n                        <i className=\"fas fa-sign-out-alt text-blue-800\"></i>{\" \"}\n                        Logout\n                      </button>\n                    </div>\n                  </>\n                ) : (\n                  <button\n                    className=\"my-2 px-2 cursor-pointer text-xl  bg-green-600 py-1  rounded-lg text-gray-700 no-underline hover:bg-green-400 hover:text-green-900\"\n                    onClick={() => setShowModal(true)}\n                  >\n                    Login/Sign Up\n                  </button>\n                )}\n              </div>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n\n      <Modal\n        id=\"modal\"\n        size=\"md\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        <img src={logo} href=\"/\" className=\"w-25 my-2 mx-auto\" alt=\"logo\" />\n\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"tabs\">\n                <Nav.Item>\n                  <Nav.Link className=\"btn\" eventKey=\"login\">\n                    Login\n                  </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link className=\"btn\" eventKey=\"signup\">\n                    Sign Up\n                  </Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body className=\"bg-gray-100 p-4 m-2 shadow-md rounded-xl\">\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <SignUpForm\n                  signUpForm={false}\n                  handleModalClose={() => setShowModal(false)}\n                />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm\n                  signUpForm={true}\n                  handleModalClose={() => setShowModal(false)}\n                />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n      {Auth.loggedIn() ? (\n        <h1 className=\"px-3 text-3xl shadow-md bg-gradient-to-r from-purple-900 to-purple-100 text-center p-2 \">\n          <FontAwesomeIcon icon={faUser} className=\"text-danger ml-4\" />{\" \"}\n          <span className=\"text-white p-2\">\n            {Auth.getProfile().data.username.toUpperCase()}\n          </span>{\" \"}\n        </h1>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default AppNavbar;\n","export default __webpack_public_path__ + \"static/media/logo.23dac1f9.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { removeQuizMutation } from \"../utils/queries\";\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\nimport logo from \"../images/logo.png\";\n\nlet date = new Date();\nlet author = \"\";\nconst SingleCard = ({\n  quizData,\n  noOfQuestions,\n  userName,\n  toDelet,\n  setUserQuizes,\n}) => {\n  author = userName;\n\n  const [delQuiz] = useMutation(removeQuizMutation);\n  const handleClick = async (_id) => {\n    const data = await delQuiz({ variables: { id: _id } });\n\n    const quizList = data.data.removeQuiz;\n    return setUserQuizes([...quizList]);\n  };\n  if (quizData.created_at) {\n    date = quizData.created_at;\n  }\n  if (quizData.username) {\n    author = quizData.username;\n  }\n\n  return (\n    <>\n      <div className=\"max-w-sm rounded-xl  overflow-hidden bg-gray-900 text-red-100 opacity-90 m-3 shadow-md \">\n        <div className=\"flex justify-between \">\n          <img\n            id=\"cardLogo\"\n            className=\"bg-gray-900  rounded-xl m-2 p-2\"\n            src={logo}\n            alt=\"inquizer logo\"\n          />\n          <div className=\"p-2 m-2\">\n            <i className=\"fas fa-user-edit \"> </i>{\" \"}\n            <span className=\"text-blue-400\">{author}</span>\n            <div className=\"mt-2\">\n              <i className=\"far fa-calendar-check \"> </i>{\" \"}\n              <span className=\"text-green-400\">{date}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-4\">\n          <h1 className=\"font-bold text-yellow-200  my-2\">\n            <i className=\"fas fa-angle-double-right text-green-500\"> </i> Title:{\" \"}\n            {quizData.title}\n          </h1>\n          <h2 className=\" text-yellow-200  my-2\">\n            <i className=\"fas fa-chart-pie text-green-500\"> </i> Difficulty:{\" \"}\n            {quizData.difficulty}\n          </h2>\n          <h2 className=\" text-yellow-200  mb-2\">\n            <i className=\"fas fa-list-ul text-green-500\"> </i> No. of Questions:{\" \"}\n            {noOfQuestions}\n          </h2>\n          <h2 className=\" text-yellow-200  my-2\">\n            <i className=\"fas fa-layer-group text-green-500\"> </i> Category:{\" \"}\n            {quizData.category}\n          </h2>\n          <h2 className=\"text-yellow-200  my-2\">\n            <i className=\"fas fa-check text-green-500\"> </i> Quiz Type:{\" \"}\n            {quizData.type}\n          </h2>\n          <div className=\"flex flex-1  rounded-xl  mt-3\">\n            {Auth.loggedIn() ? (\n              <Link\n                to={`quiz/${quizData._id}`}\n                className=\"cursor-pointer no-underline text-center hover:bg-green-900 hover:text-green-100 focus:outline-none focus:ring-2  rounded-xl bg-green-500 w-100 text-gray-900 font-bold m-1 p-2\"\n              >\n                <i className=\"fas fa-play-circle \"></i> Start the Quiz\n              </Link>\n            ) : (\n              <button\n                className=\" disabled:opacity-50  rounded-xl bg-red-500 w-100 text-red-100 m-1 p-2 cursor-help\"\n                disabled\n              >\n                <i className=\"fas fa-play-circle \"></i> Login and Start the Quiz\n              </button>\n            )}\n            {toDelet ? (\n              <button\n                onClick={() => {\n                  handleClick(quizData._id);\n                }}\n                className=\" focus:outline-none hover:bg-red-600 rounded-xl bg-green-100 text-gray-800 \"\n              >\n                <i className=\"fas fa-trash-alt text-red-500 p-3  hover:text-green-100\"></i>\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SingleCard;\n","import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport SingleCard from \"../components/SingleCard\";\nimport { getAllQuizzes } from \"../utils/queries\";\n\nimport \"./style.css\";\n\nconst Home = () => {\n  const { loading, data } = useQuery(getAllQuizzes);\n\n  const [Quizes, setAllQuizes] = useState([]);\n  useEffect(() => {\n    if (loading) return;\n    setAllQuizes(data.getAllQuizzes);\n    console.log(data)\n  }, [loading, data]);\n\n  return (\n    <>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4 text-center mt-3\">Welcome to</h1>\n        <h2 className=\"display-4 text-center mb-3\">\n          in<span className=\"text-red-700 font-bold\">Q</span>uizitive\n        </h2>\n      </div>\n      <div className=\"flex flex-wrap justify-center bg-gray-100 m-3 p-3 rounded-xl shadow-md\">\n        {loading ? (\n          <div\n            key=\"loading\"\n            className=\"spinner-border text-success\"\n            role=\"status\"\n          >\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        ) : (\n          Quizes.map((quiz) => {\n            return (\n              <SingleCard\n                key={quiz._id}\n                quizData={quiz}\n                noOfQuestions={quiz?.questions.length + 1}\n                toDelet={false}\n                userName={quiz.author}\n              />\n            );\n          })\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport \"./style.css\";\nimport SingleCard from \"./SingleCard\";\n\nconst ProfileCards = ({ userQuizes, userName, setUserQuizes }) => {\n  return (\n    <>\n      <div className=\"flex flex-wrap justify-center bg-gray-100 m-3 p-3 rounded-xl shadow-md\">\n        {userQuizes.map((quiz) => {\n          return (\n            <SingleCard\n              key={quiz._id}\n              quizData={quiz}\n              noOfQuestions={quiz.questions.length}\n              userName={userName}\n              toDelet={true}\n              setUserQuizes={setUserQuizes}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default ProfileCards;\n","export const categoryOptions = [\n  {\n    value: 9,\n    label: \"General Knowledge\",\n  },\n  {\n    value: 10,\n    label: \"Entertainment: Books\",\n  },\n  {\n    value: 11,\n    label: \"Entertainment: Film\",\n  },\n  {\n    value: 12,\n    label: \"Entertainment: Music\",\n  },\n  {\n    value: 13,\n    label: \"Entertainment: Musicals & Theatres\",\n  },\n  {\n    value: 14,\n    label: \"Entertainment: Television\",\n  },\n  {\n    value: 15,\n    label: \"Entertainment: Video Games\",\n  },\n  {\n    value: 16,\n    label: \"Entertainment: Board Games\",\n  },\n  {\n    value: 17,\n    label: \"Science & Nature\",\n  },\n  {\n    value: 18,\n    label: \"Science: Computers\",\n  },\n  {\n    value: 19,\n    label: \"Science: Mathematics\",\n  },\n  {\n    value: 20,\n    label: \"Mythology\",\n  },\n  {\n    value: 21,\n    label: \"Sports\",\n  },\n  {\n    value: 22,\n    label: \"Geography\",\n  },\n  {\n    value: 23,\n    label: \"History\",\n  },\n  {\n    value: 24,\n    label: \"Politics\",\n  },\n  {\n    value: 25,\n    label: \"Art\",\n  },\n  {\n    value: 26,\n    label: \"Celebrities\",\n  },\n  {\n    value: 27,\n    label: \"Animals\",\n  },\n  {\n    value: 28,\n    label: \"Vehicles\",\n  },\n  {\n    value: 29,\n    label: \"Entertainment: Comics\",\n  },\n  {\n    value: 30,\n    label: \"Science: Gadgets\",\n  },\n  {\n    value: 31,\n    label: \"Entertainment: Japanese Anime & Manga\",\n  },\n  {\n    value: 32,\n    label: \"Entertainment: Cartoon & Animations\",\n  },\n];\n\nexport const typeOptions = [\n  {\n    value: \"multiple\",\n    label: \"Multiple Choice\",\n  },\n  {\n    value: \"boolean\",\n    label: \"True / False\",\n  },\n];\n\nexport const difficultyOptions = [\n  {\n    value: \"easy\",\n    label: \"Easy\",\n  },\n  {\n    value: \"medium\",\n    label: \"Medium\",\n  },\n  {\n    value: \"hard\",\n    label: \"Hard\",\n  },\n];\n","export const searchQuiz = async (query) => {\n  const quizData = await fetch(\n    `https://opentdb.com/api.php?amount=${query.amount}&category=${query.category.value}&difficulty=${query.difficulty}&type=${query.type}`\n  );\n  console.log(\n    `https://opentdb.com/api.php?amount=${query.amount}&category=${query.category.value}&difficulty=${query.difficulty}&type=${query.type}`\n  );\n  const resp = await quizData.json();\n  return resp;\n};\n","import React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\n\nimport ProfileCards from \"../ProfileCards\";\nimport { addQuizMutation } from \"../../utils/queries\";\n\nimport {\n  categoryOptions,\n  difficultyOptions,\n  typeOptions,\n} from \"../../utils/valuesForQuizForm\";\nimport { searchQuiz } from \"../../utils/trivaApi\";\nimport Auth from \"../../utils/auth\";\n\nconst amountOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfunction QuizSearchForm({ quizData }) {\n  const userName = Auth.getProfile().data.username;\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [AlertType, setAlertType] = useState({ Fail: false, Success: false });\n  const [alertMessage, setAlertMessage] = useState(\"\");\n\n  const [addQuiz] = useMutation(addQuizMutation);\n\n  const [userQuizes, setUserQuizes] = useState([...quizData]);\n\n  const [userFormData, setUserFormData] = useState({\n    title: \"\",\n    amount: amountOptions[0],\n    category: {\n      label: categoryOptions[0].label,\n      value: categoryOptions[0].value,\n    },\n    type: typeOptions[0].value,\n    difficulty: difficultyOptions[0].value,\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    if (name === \"category\") {\n      setUserFormData({\n        ...userFormData,\n        [name]: {\n          value: event.target.value.split(\",\")[0],\n          label: event.target.value.split(\",\")[1],\n        },\n      });\n    } else if (name === \"type\") {\n      let newValue;\n      if (value === \"boolean\") newValue = \"True/False type\";\n      if (value === \"multiple\") newValue = \"Mutiple choice type\";\n      setUserFormData({\n        ...userFormData,\n        [name]: newValue,\n      });\n    } else {\n      setUserFormData({ ...userFormData, [name]: value });\n    }\n  };\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    // check if form has everything (as per react-bootstrap docs)\n    event.stopPropagation();\n    try {\n      const { results } = await searchQuiz(userFormData);\n\n      let Quiz = {};\n      Quiz.title = userFormData.title;\n      Quiz.amount = userFormData.amount.toString();\n      Quiz.category = userFormData.category.label;\n      Quiz.type = userFormData.type;\n      Quiz.difficulty = userFormData.difficulty;\n\n      Quiz.questions = [];\n      Quiz.questions = results.map(\n        ({ question, correct_answer, incorrect_answers }) => {\n          return { question, correct_answer, incorrect_answers };\n        }\n      );\n\n      const { data } = await addQuiz({ variables: Quiz });\n\n      // const quiz_id = data.addQuiz._id;\n      setUserQuizes([...data?.addQuiz]);\n      setShowAlert(true);\n      setAlertType({ Fail: false, Success: true });\n      setAlertMessage(\"Your Quizz added successfully.\");\n      setUserFormData({\n        title: \"\",\n        amount: amountOptions[0],\n        category: {\n          label: categoryOptions[0].label,\n          value: categoryOptions[0].value,\n        },\n        type: typeOptions[0].value,\n        difficulty: difficultyOptions[0].value,\n      });\n    } catch (err) {\n      setAlertMessage(err.message);\n      setShowAlert(true);\n      setAlertType({ Fail: true, Success: false });\n    }\n  };\n  return (\n    <div className=\" grid grid-cols-1 lg:grid-cols-3 gap-2\">\n      <div className=\"w-100 bg-purple-100 rounded-xl \">\n        <form onSubmit={handleFormSubmit}>\n          {AlertType.Fail ? (\n            <Alert\n              dismissible\n              onClose={() => setShowAlert(false)}\n              show={showAlert}\n              variant=\"danger\"\n            >\n              {alertMessage}\n            </Alert>\n          ) : (\n            \"\"\n          )}\n          {AlertType.Success ? (\n            <Alert\n              dismissible\n              onClose={() => setShowAlert(false)}\n              show={showAlert}\n              variant=\"success\"\n            >\n              {alertMessage}\n            </Alert>\n          ) : (\n            \"\"\n          )}\n\n          <h1 className=\"text-green-800 m-5 text-center\">Add a New Quiz</h1>\n          <div className=\"container w-full\">\n            <label className=\"block text-left m-2\" htmlFor=\"amount\">\n              <span className=\"text-gray-700\">Quiz Title: </span>\n              <input\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Place the Quiz title here\"\n                className=\"bg-gray-100 my-2 text-green-600 font-bold shadow-md rounded  py-2 px-2  flex-1 \"\n                value={userFormData.title}\n                onChange={handleInputChange}\n                required\n              />\n            </label>\n            <label className=\"block text-left m-2\" htmlFor=\"amount\">\n              <span className=\"text-gray-700\">Amount of questions: </span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.amount}\n                name=\"amount\"\n                onChange={handleInputChange}\n              >\n                {amountOptions.map((number) => (\n                  <option key={number} value={number}>\n                    {number}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"category\">\n              <span className=\"text-gray-700\">Select category:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={\n                  userFormData.category.value +\n                  \",\" +\n                  userFormData.category.label\n                }\n                name=\"category\"\n                onChange={handleInputChange}\n              >\n                {categoryOptions.map(({ value, label }) => (\n                  <option key={label} value={value + \",\" + label}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"difficulty\">\n              <span className=\"text-gray-700\">Difficulty:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.difficulty.label}\n                name=\"difficulty\"\n                onChange={handleInputChange}\n              >\n                {difficultyOptions.map(({ value, label }) => (\n                  <option key={label} value={value}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <label className=\"block text-left m-2\" htmlFor=\"type\">\n              <span className=\"text-gray-700\">Type of question:</span>\n\n              <select\n                className=\"form-select block w-full mt-1\"\n                value={userFormData.type.label}\n                name=\"type\"\n                onChange={handleInputChange}\n              >\n                {typeOptions.map(({ value, label }) => (\n                  <option key={label} value={value}>\n                    {label}\n                  </option>\n                ))}\n              </select>\n            </label>\n\n            <button\n              disabled={!userFormData.title}\n              type=\"submit\"\n              variant=\"success\"\n              className=\"border-2 w-100 shadow-md rounded-full  border-green-500 px-12 py-2 inline-block mt-2 font-semibold text hover:bg-green-500 hover:text-white text-decoration-none\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className=\"col-span-2  shadow-md bg-gray-600 rounded-xl\">\n        {!userQuizes ? (\n          <div\n            key=\"loading\"\n            className=\"spinner-border text-success\"\n            role=\"status\"\n          >\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        ) : (\n          <ProfileCards\n            setUserQuizes={setUserQuizes}\n            userQuizes={userQuizes}\n            userName={userName}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default QuizSearchForm;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport QuizSearchForm from \"../components/Quiz/QuizSearchForm\";\nimport { getUserQuizzes } from \"../utils/queries\";\n\nconst Profile = () => {\n  const { loading, data } = useQuery(getUserQuizzes);\n  return (\n    <>\n      {loading ? (\n        <div\n          key=\"loading\"\n          className=\"spinner-border text-success\"\n          role=\"status\"\n        >\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : (\n        <div>\n          <QuizSearchForm quizData={data.getUserQuizzes} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\n\nconst SummaryCard = ({ questionRes }) => {\n  return (\n    <div className=\" flex-1 divide-x-4 divide-gray-200 float-left m-2\">\n      {questionRes.res ? (\n        <>\n          <div className=\"text-green-900 flex-auto p-2 float-left\">\n            <i className=\"fas fa-check-circle text-green-600\"></i>{\" \"}\n            {questionRes.question}{\" \"}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"text-red-900 flex-auto p-2 float-left\">\n            <i className=\" fas fa-times-circle text-red-600\"></i>{\" \"}\n            {questionRes.question}{\" \"}\n          </div>\n        </>\n      )}\n\n      <hr />\n    </div>\n  );\n};\n\nexport default SummaryCard;\n","import React from \"react\";\nimport SummaryCard from \"./SummaryCard\";\nconst QuizResult = ({ correctAnswers, quizLength, result, summary }) => {\n  return (\n    <div className=\"container bg-purple-100 rounded-xl shadow-md p-3\">\n      <h1 className=\"text-center m-3 text-3xl \"> Quiz Result</h1>\n      <hr />\n      <h2 className=\" p-1 text-3xl my-2 \">\n        <i className=\"fas fa-check-square text-green-500 text-3xl\"></i>{\" \"}\n        <span className=\"text-purple-900 text-3xl\">{correctAnswers} </span>\n        OUT OF <span className=\"text-purple-900 text-3xl\">{quizLength} </span>\n      </h2>\n      <h2 className=\"text-2xl text-blue-900 text-center font-bold my-2\">\n        {\" \"}\n        <i className=\"fas fa-medal text-2xl text-green-600 text-center \"></i>{\" \"}\n        your Score: {result}{\" \"}\n      </h2>\n      <hr />\n\n      <div className=\"flex flex-wrap justify-center bg-gray-100 m-3 p-3 rounded-xl shadow-md\">\n        <hr />\n        <h1 className=\"text-bold text-blue-600 text-xl border-x-2 border-solid border-b-2 w-100 text-center\">\n          Quiz summary\n        </h1>\n\n        <div>\n          {summary.map((question, index) => {\n            return <SummaryCard key={index} questionRes={question} />;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizResult;\n","import React, { useEffect, useState } from \"react\";\nimport { ListGroup, ProgressBar } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport parse from \"html-react-parser\";\n\nimport QuizResult from \"./QuizResult\";\nimport { AddScoreToQuizMutation } from \"../../utils/queries\";\nimport \"./style.css\";\nimport Auth from \"../../utils/auth\";\nimport logo from \"../../images/logo.png\";\n\nconst TIME_PER_QUESTION = 10;\n\nconst QuizLogic = ({ quizData, quizId }) => {\n  const userId = Auth.getProfile().data._id;\n  const user_name = Auth.getProfile().data.username;\n\n  let [addScore, { data: ScoreData }] = useMutation(AddScoreToQuizMutation);\n\n  const category = quizData.category;\n  const type = quizData.type;\n  const difficulty = quizData.difficulty;\n\n  const Questions = quizData.questions || [];\n  const quizQuestions = Questions.map((Q) => {\n    const correct_answer = Q.correct_answer;\n    const incorrect_answers = Q.incorrect_answers;\n    const question = Q.question;\n    return {\n      category,\n      type,\n      difficulty,\n      correct_answer,\n      incorrect_answers,\n      question,\n    };\n  });\n\n  const [questionNumber, setquestionNumber] = useState(0);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [answers, setAnswers] = useState([])\n  const [summary, setSummary] = useState([]);\n\n  const [timeLeft, setTimeLeft] = useState(\n    TIME_PER_QUESTION * quizQuestions.length\n  );\n\n  const [isComplete, setComplete] = useState(false);\n  const [score, setScore] = useState(0);\n\n  function shuffle1(arr) {\n    setAnswers(\n      Array(arr.length)\n        .fill(null)\n        .map((_, i) => [Math.random(), i])\n        .sort(([a], [b]) => a - b)\n        .map(([, i]) => arr[i])\n    );\n  }\n\n  useEffect(() => {\n    shuffle1([\n      quizQuestions[questionNumber].correct_answer,\n      ...quizQuestions[questionNumber].incorrect_answers,\n    ]);\n  }, [questionNumber]);\n  const timer = setTimeout(() => {\n    if (timeLeft <= 0) {\n      clearTimeout(timer);\n      setComplete(true);\n    } else {\n      setTimeLeft(timeLeft - 1);\n    }\n  }, [1000]);\n\n  const handleClick = (event) => {\n    setActiveQuestion(event.target.id);\n  };\n\n  const handleSubmit = async (event) => {\n    setActiveQuestion(0);\n    if (activeQuestion !== 0) {\n      const answerIndex = parseInt(activeQuestion.replace(/[^0-9]/g, \"\"));\n      if (\n        answers[answerIndex] === quizQuestions[questionNumber].correct_answer\n      ) {\n        setCorrectAnswers(correctAnswers + 1);\n        setSummary([\n          ...summary,\n          { question: quizQuestions[questionNumber].question, res: true },\n        ]);\n      } else {\n        setSummary([\n          ...summary,\n          { question: quizQuestions[questionNumber].question, res: false },\n        ]);\n      }\n      if (questionNumber < quizQuestions.length - 1) {\n        setquestionNumber(questionNumber + 1);\n      } else {\n        const totalQuestions = quizQuestions.length;\n        const totalScore =\n          (correctAnswers / totalQuestions) *\n          (timer / totalQuestions) *\n          TIME_PER_QUESTION;\n\n        setScore(Math.round(totalScore));\n\n        const quizScore = {\n          score: `${Math.round(totalScore)}`,\n          user_id: userId,\n        };\n\n        const mydata = await addScore({\n          variables: { id: quizId, score: quizScore },\n        });\n\n        clearTimeout(timer);\n        setComplete(true);\n      }\n    }\n  };\n\n  if (isComplete) {\n    return (\n      <QuizResult\n        correctAnswers={correctAnswers}\n        quizLength={quizQuestions.length}\n        result={score}\n        summary={summary}\n      />\n    );\n  } else {\n    return (\n      <div className=\"container shadow-xl my-4 mx-auto border-2 p-4 bg-gray-100  rounded-xl\">\n        <img\n          className=\"w-20 mx-auto rounded-xl m-2\"\n          src={logo}\n          alt=\"inquizer logo\"\n        />{\" \"}\n        <h1 className=\"text-xl p-2\">\n          <span>\n            <i className=\"fas fa-check-double text-green-700 \"></i>\n          </span>{\" \"}\n          Correct answers:{\" \"}\n          <span className=\"text-green-600 font-mono font-bold\">\n            {correctAnswers}\n          </span>\n        </h1>\n        <hr />\n        <h3 className=\"text-xl p-2\">\n          <span>\n            <i className=\"fas fa-hourglass-half text-red-700\"></i>\n          </span>{\" \"}\n          Time left\n          <div>\n            <ProgressBar\n              id=\"bar\"\n              striped\n              animated\n              max={TIME_PER_QUESTION * quizQuestions.length}\n              now={timeLeft}\n              label={`${timeLeft} sec`}\n              variant=\"danger\"\n            />\n          </div>\n        </h3>\n        <hr />\n        <h2 className=\"text-xl p-2\">\n          {\" \"}\n          <i className=\"fas fa-question-circle text-blue-900 \"></i> Question\n        </h2>\n        <p className=\"text-blue-600 font-bold text-xl m-2 p-2\">\n          {\" \"}\n          {parse(quizQuestions[questionNumber].question)}\n        </p>\n        <br />\n        <ListGroup as=\"ul\" className=\" text-xl\">\n          {answers.map((answer, index) =>\n            `answer-${index}` === activeQuestion ? (\n              <ListGroup.Item\n                className=\"list-group-item-primary rounded-b-2xl\"\n                key={index}\n                action\n                onClick={handleClick}\n                active\n                id={`answer-${index}`}\n              >\n                <i className=\"fas fa-angle-double-right text-yellow-400\"></i>{\" \"}\n                {parse(answer)}\n              </ListGroup.Item>\n            ) : (\n              <ListGroup.Item\n                className=\"list-group-item-light\"\n                key={index}\n                action\n                onClick={handleClick}\n                id={`answer-${index}`}\n              >\n                {parse(answer)}\n              </ListGroup.Item>\n            )\n          )}\n        </ListGroup>\n        <br />\n        <hr />\n        <div className=\"d-grid gap-2\">\n          <button\n            className=\"bg-green-900 text-green-100 rounded-full text-xl py-2\"\n            onClick={handleSubmit}\n          >\n            <i className=\"fas fa-forward  text-yellow-200\"></i>{\" \"}\n            <span className=\"font-bold text-white\"> Submit</span>\n          </button>\n        </div>\n        <br />\n        <ProgressBar now={(questionNumber * 100) / quizQuestions.length} />\n      </div>\n    );\n  }\n};;\n\nexport default QuizLogic;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router-dom\";\n\nimport QuizLogic from \"./QuizLogic\";\nimport { getSingleQuiz } from \"../../utils/queries\";\n\n\nconst Quiz = () => {\n  const { quizId } = useParams();\n\n  const { loading, data } = useQuery(getSingleQuiz, {\n    variables: { _id: quizId },\n  });\n\n  return (\n    <div>\n      {loading ? (\n        <div className=\"spinner-border text-success\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : (\n        <QuizLogic quizData={data.getQuiz} quizId={quizId} />\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./pages/Home\";\nimport Profile from \"./pages/Profile\";\nimport Quiz from \"./components/Quiz/Quiz\";\nimport Auth from \"./utils/auth\";\n\n\nfunction App() {\n\n  return (\n    <Router>\n      <Navbar />\n      <Routes>\n        <Route exact path=\"/\" element={<Home />} />\n        <Route\n          exact\n          path=\"/profile\"\n          element={Auth.loggedIn() ? <Profile /> : <Home />}\n        />\n        <Route exact path=\"/quiz/:quizId\" element={<Quiz />} />\n        <Route exact path=\"/profile/quiz/:quizId\" element={<Quiz />} />\n        <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n      </Routes>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  ApolloLink,\n  concat,\n} from \"@apollo/client\";\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Auth from \"./utils/auth\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\n\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" });\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext(({ headers = {} }) => ({\n    headers: {\n      ...headers,\n      authorization: Auth.loggedIn() ? Auth.getToken() : null,\n    },\n  }));\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink),\n});\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}